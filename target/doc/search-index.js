var searchIndex = JSON.parse('{\
"stack_dst":{"doc":"Support for storing dynamically-sized types on the stack","t":[8,3,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["DataBuf","StackA","Value","ValueA","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","drop","drop","fmt","fmt","from","from","into","into","into_future","is_empty","new","new_raw","new_stable","poll","pop","push_cloned","push_stable","push_str","to_string","top","top_mut","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["stack_dst","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Trait used to represent a data buffer, typically you’ll …","A fixed-capacity stack that can contain dynamically-sized …","Stack-allocated DST (using a default size)","Stack-allocated dynamically sized type","","","","","","","","","","","","","","","","","Tests if the stack is empty","Construct a new (empty) stack","UNSAFE: <code>data</code> must point to <code>size</code> bytes, which shouldn’t …","Construct a stack-based DST (without needing <code>Unsize</code>)","","Pop the top item off the stack","Pushes a set of items (cloning out of the input slice)","Push a value at the top of the stack (without using <code>Unsize</code>…","Push the contents of a string slice as an item onto the …","","Returns a pointer to the top item on the stack","Returns a pointer to the top item on the stack …","","","","","",""],"i":[0,0,0,0,1,2,1,2,1,2,2,1,2,2,2,1,2,1,2,2,1,1,2,2,2,1,1,1,1,2,1,1,1,2,1,2,1,2],"f":[null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["stacka",3]],[[["usize",15]],[["valuea",3],["option",4]]],[[["fnonce",8]],[["result",4],["valuea",3]]],[[["context",3],["pin",3]],["poll",4]],[[]],[[],["result",4]],[[["fnonce",8]],["result",4]],[[["str",15]],["result",4]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"StackA"],[3,"ValueA"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};